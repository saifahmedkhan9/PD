MPI
Q1.WAP using MPI to find the average of two number.
Ans:
#include <stdio.h>
#include <mpi.h>
int main(int argc, char *argv[])
{
	int rank;
	int a[2];
	float average;
	MPI_Status status;
	MPI_Init(&argc,&argv);
	MPI_Comm_rank(MPI_COMM_WORLD,&rank);

	if ( rank == 0 )
	{
		printf("Enter the two numbers:\n");
		scanf("%d%d",&a[0],&a[1]);
		MPI_Send(a,2,MPI_INT,1,0,MPI_COMM_WORLD);
		MPI_Recv(&average,1,MPI_FLOAT,1,1,MPI_COMM_WORLD,&status);

		printf("The average is : %f\n",average);

	}
	if ( rank == 1 )
	{
		MPI_Recv(a,2,MPI_INT,0,0,MPI_COMM_WORLD,&status);

		average = (float)(a[0] + a[1]) / 2;

		MPI_Send(&average,1,MPI_FLOAT,0,1,MPI_COMM_WORLD);
	}

	MPI_Finalize();
	return 0;
}

Q2.WAP USING MPI TO FIND SUM OF AN ARRAY.
ANS:
#include <mpi.h>
#include <stdio.h>
int array[20] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
int main(int argc, char *argv[])
{
	int size,N,myrank,sum = 0,i;
	MPI_Status status;
// Initialize the MPI
	MPI_Init(&argc,&argv);
// Calculate rank
	MPI_Comm_rank(MPI_COMM_WORLD,&myrank);
	MPI_Comm_size(MPI_COMM_WORLD,&size);
// Now check for first process
	if ( myrank == 0 )
	{
		printf("Enter the value of N\n");
		scanf("%d",&N);
		//Send N to all process
		for (i = 1; i < size; i++)
		{
			MPI_Send(&N,1,MPI_INT,i,i,MPI_COMM_WORLD);
		}
		// Now calculate the sum for this process
		for ( i = 0 ; i < N ; i += size )
		{
			sum = sum + array[i];
		}
		int temp;
		for ( i = 1 ; i < size ; i++ )
		{
			MPI_Recv(&temp,1,MPI_INT,i,i,MPI_COMM_WORLD,&status);
			sum = sum + temp;
		}
		printf("Sum of the array is: %d\n",sum );
	}
	else
	{
		
// Recieving sum of other processes
		MPI_Recv(&N,1,MPI_INT,0,myrank,MPI_COMM_WORLD,&status);
// calculating sum of for other processes
		for ( i = myrank ; i < N ; i += size )
		{
			sum = sum + array[i];
		}
		printf("Sum returned by %d process is %d\n",myrank,sum );
// Sending data to first process
		MPI_Send(&sum,1,MPI_INT,0,myrank,MPI_COMM_WORLD);
	}
	MPI_Finalize();
	return 0;
}

Q3. WAP USING MPI TO GATHER THE FRAGMENT OF AN ARRAY.
ANS:
#include <stdio.h>
#include "mpi.h"

int main( int argc, char **argv )
{
    int isend, irecv[3];
    int rank, size;

    MPI_Init( &argc, &argv );
    MPI_Comm_rank( MPI_COMM_WORLD, &rank );
    MPI_Comm_size( MPI_COMM_WORLD, &size );

    isend = rank + 1;

    MPI_Gather(&isend, 1, MPI_INT, &irecv, 1, MPI_INT, 0, MPI_COMM_WORLD);

    if(rank == 0)
    printf("irecv = %d %d %d\n", irecv[0], irecv[1], irecv[2]);

    MPI_Finalize();
    return 0;
}
Q4.WAP USING MPI TO PRINT THE RANK OF THE PROCESS.
ANS:
#include "mpi.h" 
#include <stdio.h> 
int main(int argc, char *argv[]) 
{ 
    int rank, nprocs;

    MPI_Init(&argc,&argv); 
    MPI_Comm_size(MPI_COMM_WORLD,&nprocs); 
    MPI_Comm_rank(MPI_COMM_WORLD,&rank); 
    MPI_Barrier(MPI_COMM_WORLD);
    printf("Hello, world.  I am %d of %d\n", rank, nprocs);
    fflush(stdout);
    MPI_Finalize(); 
    return 0; 
} 
 
Q5.WAP USING MPI TO FIND THE SUM OF AN ARRAY USING REDUCTION PROCESS.
ANS:
#include <stdio.h>
#include <mpi.h>

// int x[200];
int main(int argc,char *argv[])
{
	int my_id,numprocess,n,sum=0,tmp,i;
	int x[20]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
	MPI_Status status;
	MPI_Init(&argc,&argv);
	MPI_Comm_rank(MPI_COMM_WORLD,&my_id);
	MPI_Comm_size(MPI_COMM_WORLD, &numprocess);
	// printf("%d %d\n",my_id,numprocess );
	if(my_id==0)
	{
		printf("Enter value of n :");
		scanf("%d",&n);
		MPI_Bcast(&n,1,MPI_INT,0,MPI_COMM_WORLD);			//USING MPI_BCAST. NO NEED TO GIVE DESTINATION ID.

		for(i=my_id;i<n;i=i+numprocess)
		{
			sum=sum+x[i];
		}
	}

	else
	{
		MPI_Bcast(&n,1,MPI_INT,0,MPI_COMM_WORLD);
		for(i=my_id;i<n;i=i+numprocess)
		{
			sum=sum+x[i];
		}
		
	}

	MPI_Reduce(&sum,&tmp,1,MPI_INT,MPI_SUM,0,MPI_COMM_WORLD);
	
	if ( my_id == 0 )
	{
		printf("Total Sum is:%d\n",tmp);
	}

	MPI_Finalize();
	return 0;
}
Q6. WAP USING MPI TO PRINT HELLO WORLD.
ANS:
#include <stdio.h>
#include <mpi.h>

int main(int argc, char *argv[])
{
	MPI_Init(&argc,&argv);
	printf("Hello world.\n");
	MPI_Finalize();
	return 0;
}

Q7.WAP USING MPI TO FIND THE VALUE OF PIE.
#include<mpi.h>
#include<stdlib.h>
#include<stdio.h>

int main(int argc,char** argv){
	int rank,size,epp;
	int* dataSend=NULL;
	int i,n;
	float res;
	float pie;

	MPI_Init(NULL,NULL);
	MPI_Comm_rank(MPI_COMM_WORLD,&rank);
	MPI_Comm_size(MPI_COMM_WORLD,&size);

	if(rank==0)
	{
			printf("Enter the value of n\n");
			scanf("%d",&n);
	}

	MPI_Bcast(&n,1,MPI_INT,0,MPI_COMM_WORLD);
	res=0;

	for(i=0;i<n/size;i++)
	{
		res+=(4/(1+(((n/size)*rank+0.5+i)/n)*(((n/size)*rank+0.5+i)/n)))/n;
	}

	MPI_Reduce(&res,&pie,1,MPI_FLOAT,MPI_SUM,0,MPI_COMM_WORLD);

	if(rank==0)
	{
		printf("The average is : %f\n",pie);
	}

	MPI_Finalize();
}

Q8. WAP USING MPU TO CALCULATE PRODUCT OF 1D ARRAY.
#include<mpi.h>
#include<stdlib.h>
#include<stdio.h>

int main(int argc,char** argv){
	int rank,size,epp;
	int* A1=NULL;
	int* A2=NULL;
	int* Rec1=NULL;
	int* Rec2=NULL;
	int i,n;
	MPI_Init(NULL,NULL);
	MPI_Comm_rank(MPI_COMM_WORLD,&rank);
	MPI_Comm_size(MPI_COMM_WORLD,&size);
	if(rank==0){
			printf("Enter size of arrays...\n");
			scanf("%d",&n);
			epp=n/size+(n%size==0?0:1);
			A1=(int*)malloc(sizeof(int)*size*epp);
			A2=(int*)malloc(sizeof(int)*size*epp);
			for(i=0;i<n;i++){
				printf("Enter A1[%d]:",i);
				scanf("%d",&A1[i]);
				printf("Enter A2[%d]:",i);
				scanf("%d",&A2[i]);
			}
			for(i=n;i<size*epp;i++){
				A1[i]=0;
				A2[i]=0;
			}
	}
	MPI_Bcast(&epp,1,MPI_INT,0,MPI_COMM_WORLD);
	Rec1=(int*)malloc(sizeof(int)*epp);
	Rec2=(int*)malloc(sizeof(int)*epp);
	MPI_Scatter(A1,epp,MPI_INT,Rec1,epp,MPI_INT,0,MPI_COMM_WORLD);
	MPI_Scatter(A2,epp,MPI_INT,Rec2,epp,MPI_INT,0,MPI_COMM_WORLD);
	for(i=0;i<epp;i++)
		Rec1[i]*=Rec2[i];
	MPI_Gather(Rec1,epp,MPI_INT,A1,epp,MPI_INT,0,MPI_COMM_WORLD);
	if(rank==0){
		printf("Data gathered : ");
		for(i=0;i<n;i++)
			printf("%d ",A1[i]);
		printf("\n");
	}
	MPI_Finalize();
}

Q9.WAP USING MPI TO CALCULATE SUM OF NATURAL NUMBERS.
#include <stdio.h>
#include <mpi.h>

// int x[200];
int main(int argc,char *argv[])
{
	int my_id,numprocess,n,sum=0,tmp,i;
	int x[20]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
	MPI_Status status;
	MPI_Init(&argc,&argv);
	MPI_Comm_rank(MPI_COMM_WORLD,&my_id);
	MPI_Comm_size(MPI_COMM_WORLD, &numprocess);
	// printf("%d %d\n",my_id,numprocess );
	if(my_id==0)
	{
		printf("Enter value of n :");
		scanf("%d",&n);

		// for(i=0;i<numprocess;i++)			//USING SIMPLE MPI_SEND
		// {
		// 	MPI_Send(&n,1,MPI_INT,i,i,MPI_COMM_WORLD);
		// }
		MPI_Bcast(&n,1,MPI_INT,0,MPI_COMM_WORLD);			//USING MPI_BCAST. NO NEED TO GIVE DESTINATION ID.

		for(i=my_id;i<n;i=i+numprocess)
		{
			sum=sum+x[i];
		}


	}
	else
	{
		// MPI_Recv(&n,1,MPI_INT,0,my_id,MPI_COMM_WORLD,&status);
		MPI_Bcast(&n,1,MPI_INT,0,MPI_COMM_WORLD);
		for(i=my_id;i<n;i=i+numprocess)
		{
			sum=sum+x[i];
		}
		
		// MPI_Send(&sum,1,MPI_INT,0,my_id,MPI_COMM_WORLD);
	}

	MPI_Reduce(&sum,&tmp,1,MPI_INT,MPI_SUM,0,MPI_COMM_WORLD);
	
	if ( my_id == 0 )
	{
		printf("Total Sum is:%d\n",tmp);
	}
	MPI_Finalize();
	return 0;

}
Q10.WAP USING MPI TO FIND THE SUM OF N RANDOM NUMBERS.
#include<mpi.h>
#include<stdlib.h>
#include<stdio.h>
int main(int argc,char** argv){
	int rank,size;
	int i,n;
	int* A=NULL;
	
	int D[2],sum;
	MPI_Init(NULL,NULL);
	MPI_Comm_rank(MPI_COMM_WORLD,&rank);
	MPI_Comm_size(MPI_COMM_WORLD,&size);
	int ctr=size*2;
	A=(int*)malloc(sizeof(int)*size*2);
	if(rank==0){
			printf("Enter %d Elements :\n",size*2);
			for(i=0;i<size*2;i++)
				scanf("%d",&A[i]);
	}
	while(ctr!=1){		
		MPI_Scatter(A,2,MPI_INT,D,2,MPI_INT,0,MPI_COMM_WORLD);
		sum=D[0]+D[1];
		MPI_Gather(&sum,1,MPI_INT,A,1,MPI_INT,0,MPI_COMM_WORLD);
		ctr/=2;
	}
	if(rank==0)
		printf("Total Sum : %d\n",A[0]);
	MPI_Finalize();
}
